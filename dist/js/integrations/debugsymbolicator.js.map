{"version":3,"file":"debugsymbolicator.js","sourceRoot":"","sources":["../../../src/js/integrations/debugsymbolicator.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from \"@sentry/core\";\nimport { Event, EventHint, Integration, StackFrame } from \"@sentry/types\";\nimport { addContextToFrame, logger } from \"@sentry/utils\";\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\"ReactNativeRenderer-dev\\\\.js$\", \"MessageQueue\\\\.js$\"].join(\"|\")\n);\n\n/**\n * React Native Stack Frame\n */\ninterface ReactNativeFrame {\n  // arguments: []\n  column: number;\n  file: string;\n  lineNumber: number;\n  methodName: string;\n}\n\n/**\n * React Native Error\n */\ntype ReactNativeError = Error & {\n  framesToPop?: number;\n  jsEngine?: string;\n  preventSymbolication?: boolean;\n  componentStack?: string;\n};\n\n/** Tries to symbolicate the JS stack trace on the device. */\nexport class DebugSymbolicator implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = DebugSymbolicator.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"DebugSymbolicator\";\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // tslint:disable-next-line: cyclomatic-complexity\n    addGlobalEventProcessor(async (event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(DebugSymbolicator);\n      // tslint:disable: strict-comparisons\n      if (!self || hint === undefined || hint.originalException === undefined) {\n        return event;\n      }\n\n      const reactError = hint.originalException as ReactNativeError;\n\n      // tslint:disable: no-unsafe-any\n      const parseErrorStack = require(\"react-native/Libraries/Core/Devtools/parseErrorStack\");\n      const stack = parseErrorStack(reactError);\n\n      // Ideally this should go into contexts but android sdk doesn't support it\n      event.extra = {\n        ...event.extra,\n        componentStack: reactError.componentStack,\n        jsEngine: reactError.jsEngine\n      };\n\n      await self._symbolicate(event, stack);\n\n      event.platform = \"node\"; // Setting platform node makes sure we do not show source maps errors\n\n      // tslint:enable: no-unsafe-any\n      // tslint:enable: strict-comparisons\n      return event;\n    });\n  }\n\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  private async _symbolicate(\n    event: Event,\n    stack: string | undefined\n  ): Promise<void> {\n    // tslint:disable: no-unsafe-any\n    // tslint:disable: strict-comparisons\n    try {\n      const symbolicateStackTrace = require(\"react-native/Libraries/Core/Devtools/symbolicateStackTrace\");\n      const prettyStack = await symbolicateStackTrace(stack);\n      if (prettyStack) {\n        const stackWithoutInternalCallsites = prettyStack.filter(\n          (frame: any) =>\n            frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null\n        );\n\n        const symbolicatedFrames = await this._convertReactNativeFramesToSentryFrames(\n          stackWithoutInternalCallsites\n        );\n        this._replaceFramesInEvent(event, symbolicatedFrames);\n      } else {\n        logger.error(\"The stack is null\");\n      }\n    } catch (error) {\n      logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n    }\n    // tslint:enable: no-unsafe-any\n    // tslint:enable: strict-comparisons\n  }\n\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  private async _convertReactNativeFramesToSentryFrames(\n    frames: ReactNativeFrame[]\n  ): Promise<StackFrame[]> {\n    let getDevServer: any;\n    try {\n      getDevServer = require(\"react-native/Libraries/Core/Devtools/getDevServer\");\n    } catch (_oO) {\n      // We can't load devserver URL\n    }\n    // Below you will find lines marked with :HACK to prevent showing errors in the sentry ui\n    // But since this is a debug only feature: This is Fine (TM)\n    return Promise.all(\n      frames.map(\n        async (frame: ReactNativeFrame): Promise<StackFrame> => {\n          let inApp = !!frame.column && !!frame.lineNumber;\n          inApp =\n            inApp &&\n            // tslint:disable-next-line: strict-type-predicates\n            frame.file !== undefined &&\n            !frame.file.includes(\"node_modules\") &&\n            !frame.file.includes(\"native code\");\n\n          const newFrame: StackFrame = {\n            colno: frame.column,\n            filename: frame.file,\n            function: frame.methodName,\n            in_app: inApp,\n            lineno: inApp ? frame.lineNumber : undefined, // :HACK\n            platform: inApp ? \"javascript\" : \"node\" // :HACK\n          };\n\n          // The upstream `react-native@0.61` delegates parsing of stacks to `stacktrace-parser`, which is buggy and\n          // leaves a trailing `(address at` in the function name.\n          // `react-native@0.62` seems to have custom logic to parse hermes frames specially.\n          // Anyway, all we do here is throw away the bogus suffix.\n          if (newFrame.function) {\n            const addressAtPos = newFrame.function.indexOf(\"(address at\");\n            if (addressAtPos >= 0) {\n              newFrame.function = newFrame.function\n                .substr(0, addressAtPos)\n                .trim();\n            }\n          }\n\n          if (inApp) {\n            // tslint:disable-next-line: no-unsafe-any\n            await this._addSourceContext(newFrame, getDevServer);\n          }\n\n          return newFrame;\n        }\n      )\n    );\n  }\n\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceFramesInEvent(event: Event, frames: StackFrame[]): void {\n    if (\n      event.exception &&\n      event.exception.values &&\n      event.exception.values[0] &&\n      event.exception.values[0].stacktrace\n    ) {\n      event.exception.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n\n  /**\n   * This tries to add source context for in_app Frames\n   *\n   * @param frame StackFrame\n   * @param getDevServer function from RN to get DevServer URL\n   */\n  private async _addSourceContext(\n    frame: StackFrame,\n    getDevServer?: any\n  ): Promise<void> {\n    let response;\n    // tslint:disable: no-unsafe-any no-non-null-assertion\n    const segments = frame.filename!.split(\"/\");\n    // tslint:disable\n    for (const idx in segments) {\n      response = await fetch(\n        `${getDevServer().url}${segments.slice(-idx).join(\"/\")}`,\n        {\n          method: \"GET\"\n        }\n      );\n      if (response.ok) {\n        break;\n      }\n    }\n    // tslint:enable\n    if (response && response.ok) {\n      const content = await response.text();\n      const lines = content.split(\"\\n\");\n\n      addContextToFrame(lines, frame);\n    }\n    // tslint:enable: no-unsafe-any no-non-null-assertion\n  }\n}\n"]}