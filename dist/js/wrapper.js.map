{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../../src/js/wrapper.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAEvD,MAAM,EAAE,QAAQ,EAAE,GAAG,aAAa,CAAC;AAEnC;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB;;;OAGG;IACG,SAAS,CAAC,KAAY;;YAC1B,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;gBACjC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAE3D,KAAa,CAAC,OAAO,GAAG;oBACvB,OAAO,EAAE,KAAK,CAAC,OAAO;iBACvB,CAAC;gBACF,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC5B,IAAI;oBACF,0CAA0C;oBAC1C,MAAM,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;iBACvD;gBAAC,WAAM;oBACN,8EAA8E;iBAC/E;gBACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC1B,YAAY,EAAE,kBAAkB;oBAChC,MAAM;oBACN,IAAI,EAAE,OAAO;iBACd,CAAC,CAAC;gBACH,MAAM,QAAQ,GAAG,GAAG,MAAM,KAAK,IAAI,KAAK,OAAO,EAAE,CAAC;gBAClD,0CAA0C;gBAC1C,OAAO,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC3C;YACD,0CAA0C;YAC1C,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;KAAA;IAED,QAAQ,EAAE,QAAQ,CAAC,EAAE;CACtB,CAAC","sourcesContent":["import { Event, Response } from \"@sentry/types\";\nimport { NativeModules, Platform } from \"react-native\";\n\nconst { RNSentry } = NativeModules;\n\n/**\n * Our internal interface for calling native functions\n */\nexport const NATIVE = {\n  /**\n   * Sending the event over the bridge to native\n   * @param event Event\n   */\n  async sendEvent(event: Event): Promise<Response> {\n    if (NATIVE.platform === \"android\") {\n      const header = JSON.stringify({ event_id: event.event_id });\n\n      (event as any).message = {\n        message: event.message\n      };\n      const payload = JSON.stringify(event);\n      let length = payload.length;\n      try {\n        // tslint:disable-next-line: no-unsafe-any\n        length = await RNSentry.getStringBytesLength(payload);\n      } catch {\n        // The native call failed, we do nothing, we have payload.length as a fallback\n      }\n      const item = JSON.stringify({\n        content_type: \"application/json\",\n        length,\n        type: \"event\"\n      });\n      const envelope = `${header}\\n${item}\\n${payload}`;\n      // tslint:disable-next-line: no-unsafe-any\n      return RNSentry.captureEnvelope(envelope);\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.sendEvent(event);\n  },\n\n  platform: Platform.OS\n};\n"]}